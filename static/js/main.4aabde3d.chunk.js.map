{"version":3,"sources":["Buttons/Buttons.tsx","Display/Display.tsx","SetMenu/SetMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","props","classNameBtnIncrement","show","maxCount","classNameBtnReset","startValue","className","onClick","increment","reset","Display","classNameDisplayWrapper","maxValue","SetMenu","setMenuMaxClassName","setMenuStartClassName","btnSetClassName","type","defaultValue","value","localStorage","onChange","changeMaxValue","changeStartValue","saveData","App","useState","Number","locMax","setMaxLoc","locStart","setStartLoc","setMaxValue","setStartValue","count","setCount","setShow","e","parseMax","currentTarget","setItem","JSON","stringify","parseStart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4aabde3d.chunk.js","sourcesContent":["import '../App.css';\r\n\r\ntype ButtonsPropsType = {\r\n  show: number | string\r\n  startValue: number\r\n  maxCount: number\r\n  increment: () => void\r\n  reset: () => void\r\n}\r\n\r\nfunction Buttons(props: ButtonsPropsType) {\r\n\r\n  const classNameBtnIncrement = props.show === props.maxCount || props.show === 'Set' || props.show === 'Error' ? \"Btn-increment-max\" : \"Btn-increment\"\r\n  const classNameBtnReset = props.show === props.startValue || props.show === 'Set' || props.show === 'Error' ? \"Btn-reset-start\" : \"Btn-reset\"\r\n\r\n  return (\r\n\r\n    <div className=\"Btn-wrapper\">\r\n      \r\n      <div className={classNameBtnIncrement}>\r\n        <button onClick={props.increment}>inc</button>\r\n      </div>\r\n\r\n      <div className={classNameBtnReset}>\r\n        <button onClick={props.reset}>reset</button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport Buttons from '../Buttons/Buttons';\r\nimport '../App.css';\r\n\r\ntype DisplayPropsType = {\r\n  show: number | string\r\n  count: number\r\n  startValue: number\r\n  maxValue: number\r\n  reset: () => void\r\n  increment: () => void\r\n}\r\n\r\nfunction Display(props: DisplayPropsType) {\r\n\r\n  const classNameDisplayWrapper = (props.show === props.maxValue || props.show === 'Error') ? \"Display-wrapper-max\" : \"Display-wrapper\"\r\n\r\n  return (\r\n\r\n    <div className='Counter-wrapper'>\r\n      <div className={classNameDisplayWrapper}>\r\n       {props.show}\r\n      </div>\r\n      <Buttons increment={props.increment} reset={props.reset} show={props.show} startValue={props.startValue} maxCount={props.maxValue} />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import {ChangeEvent} from 'react';\r\nimport '../App.css';\r\n\r\ntype setMenuPropsType = {\r\n  startValue: number\r\n  maxValue: number\r\n  show: number | string\r\n  changeMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n  changeStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n  saveData: () => void\r\n}\r\n\r\nfunction SetMenu(props: setMenuPropsType) {\r\n\r\n  const setMenuMaxClassName = (props.show === 'Error') ? 'Set-menu-max-error' : 'Set-menu-max-wrapper'\r\n  const setMenuStartClassName = (props.show === 'Error') ? 'Set-menu-start-error' : 'Set-menu-start-wrapper'\r\n  const btnSetClassName = (props.show === 'Set') ? 'Btn-set' : 'Btn-set-disable' \r\n\r\n  return (\r\n\r\n    <div className='Set-menu-wrapper'>\r\n      <div className={setMenuMaxClassName}>\r\n        <div>MAX VALUE:</div>\r\n        <input type='number' defaultValue={props.maxValue} value={localStorage.maxValue} onChange={props.changeMaxValue} />\r\n      </div>\r\n      <div className={setMenuStartClassName} >\r\n        <div>START VALUE:</div>\r\n        <input type='number' defaultValue={props.startValue} value={localStorage.startValue} onChange={props.changeStartValue} />\r\n      </div>\r\n      <div className='Btn-set-wrapper'>\r\n        <div className={btnSetClassName}>\r\n          <button onClick={props.saveData}>set</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default SetMenu;","import React, { useState, ChangeEvent } from 'react';\nimport './App.css';\nimport Display from './Display/Display';\nimport SetMenu from './SetMenu/SetMenu';\n\nfunction App() {\n\n  const [locMax, setMaxLoc] = useState<number>(Number(localStorage.maxValue) ? Number(localStorage.maxValue) : 5)\n  const [locStart, setStartLoc] = useState<number>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n  const [maxValue, setMaxValue] = useState<number>(Number(localStorage.maxValue) ? Number(localStorage.maxValue) : 5)\n  const [startValue, setStartValue] = useState<number>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n  const [count, setCount] = useState<number>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n  const [show, setShow] = useState<number | string>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n\n  const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n    // const setStart = localStorage.setItem('startValue', JSON.stringify(Number(e.currentTarget.value)))\n    // const getStart = localStorage.getItem('startValue') || `${setStart}`\n    // const parseStart = (typeof getStart === 'string') ? JSON.parse(getStart) : ''\n    // setStartLoc(parseStart)\n    let parseStart: number = +e.currentTarget.value\n    if (parseStart >= -1 && locMax >= -1) {\n      setStartLoc(parseStart)\n      setShow('Set')\n      localStorage.setItem('startValue', JSON.stringify(Number(e.currentTarget.value)))\n    } else if (parseStart < -1 || parseStart >= locMax || locMax < 0) {\n      setShow('Error')\n    }\n  }\n\n  const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n    // const setMax = localStorage.setItem('maxValue', JSON.stringify(Number(e.currentTarget.value)))\n    // const getMax = localStorage.getItem('maxValue') || `${setMax}`\n    // const parseMax = (typeof getMax === 'string') ? JSON.parse(getMax) : ''\n    // setMaxLoc(parseMax)\n    let parseMax: number = +e.currentTarget.value\n    if (parseMax >= -1 && locStart >= -1) {\n      setMaxLoc(parseMax)\n      setShow('Set')\n      localStorage.setItem('maxValue', JSON.stringify(Number(e.currentTarget.value)))\n    } else if (parseMax < -1 || parseMax <= locStart || locStart < 0) {\n      setShow('Error')\n    }\n  }\n\n  function increment() {\n    if (count < maxValue && locStart >= 0 && locMax >= 0 && locStart < locMax && maxValue === locMax && startValue === locStart) {\n      setCount(count + 1)\n      setShow(count + 1)\n    } else if (maxValue !== locMax && startValue !== locStart) {\n      setShow('Set')\n    }\n  }\n\n  function reset() {\n    if (locStart >= 0 && locMax >= 0 && locStart < locMax  && maxValue === locMax && startValue === locStart) {\n      setCount(Number(localStorage.startValue))\n      setShow(Number(localStorage.startValue))\n    } else if(maxValue !== locMax && startValue !== locStart) {\n      setShow('Set')\n    }\n  }\n\n  const saveData = () => {\n    if(locStart >= 0 && locMax >=0 && locStart < locMax) {\n      setMaxValue(Number(localStorage.maxValue))\n      setStartValue(Number(localStorage.startValue))\n      setCount(Number(localStorage.startValue))\n      setShow(Number(localStorage.startValue))\n    } else {\n      setShow('Error')\n    }\n  }\n\n  return (\n    <div className='App-wrapper'>\n\n      <SetMenu\n        startValue={startValue}\n        maxValue={maxValue}\n        show={show}\n        changeMaxValue={changeMaxValue}\n        changeStartValue={changeStartValue}\n        saveData={saveData} />\n      <Display\n        startValue={startValue}\n        maxValue={maxValue}\n        count={count}\n        show={show}\n        increment={increment}\n        reset={reset} />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}